<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>千里之行 始于足下 - qianlizhixing</title><link>/</link><description></description><lastBuildDate>Mon, 26 Apr 2021 00:00:00 +0800</lastBuildDate><item><title>ARTS第二十五周</title><link>/artsdi-er-shi-wu-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 220 存在重复元素III&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/contains-duplicate-iii/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/coding-training/blob/main/leetcode/220.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;保持有序滑动窗口，二分查找&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_62/&lt;/p&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_64/&lt;/p&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_68/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;只有代码代表真相&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看源代码，程序的意义应该是显而易见的；要知道一个程序做什么，源代码最终是您可以确定的&lt;/li&gt;
&lt;li&gt;最准确的需求文档也不能说出全部真相，不包含程序实际的详细故事，只包含需求分析人员的高层次意图&lt;/li&gt;
&lt;li&gt;使代码尽可能简单，便于阅读和理解&lt;/li&gt;
&lt;li&gt;精心设计代码要表达的内容，尽可能直接地传达代码正在做的事&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;结对编程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作为一名团队成员，要对没有比你有经验的开发者有耐心&lt;/li&gt;
&lt;li&gt;直面你对被更熟练的开发人员吓倒的恐惧，要意识到每个人都是不同的 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 26 Apr 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-04-26:/artsdi-er-shi-wu-zhou.html</guid><category>ARTS</category><category>网络编程</category><category>python库</category><category>socket</category></item><item><title>ARTS第二十四周</title><link>/artsdi-er-shi-si-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 179 最大数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/largest-number/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/coding-training/blob/main/leetcode/179.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;字符串比较&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_57/&lt;/p&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_60/&lt;/p&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_61/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;消息传递在并行系统中带来更好的可伸缩性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;几乎所有并发问题都与共享可变内存的使用有关:竞争条件、死锁、活锁等。答案似乎很明显:要么放弃并发性，要么回避共享内存&lt;/li&gt;
&lt;li&gt;可以使用进程和消息传递，而不是使用线程和共享内存作为编程模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;测试员是你的朋友&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因为测试人员报告琐碎的问题，开发看起来很糟糕&lt;/li&gt;
&lt;li&gt;因为测试人员的QC，客户没有让开发修复那些“小东西”所困扰而感到兴奋时，开发看起来很棒 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 19 Apr 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-04-19:/artsdi-er-shi-si-zhou.html</guid><category>ARTS</category><category>命令行解析</category><category>python库</category><category>argparse</category><category>getopt</category></item><item><title>完成leetcode300题</title><link>/wan-cheng-leetcode300ti.html</link><description>&lt;h3&gt;完成leetcode300题&lt;/h3&gt;
&lt;p&gt;&lt;img src=".\img\leetcode 300.png" alt="leetcode 300" style="zoom: 25%;" /&gt;&lt;/p&gt;
&lt;h4&gt;刷题经过&lt;/h4&gt;
&lt;p&gt;二月之前都是断断续续在做题，二月因为后面的面试，在自习室刷了半个月，每天10到15道题节奏。&lt;/p&gt;
&lt;p&gt;二月后保持一天最少一道题，基本上是每日1题的题目，简单顺利就多做几道。&lt;/p&gt;
&lt;h4&gt;刷题收获&lt;/h4&gt;
&lt;p&gt;心理上不会害怕算法题。&lt;/p&gt;
&lt;p&gt;题目大致能想到知识点。&lt;/p&gt;
&lt;p&gt;直接的题目基本能写出答案。&lt;/p&gt;
&lt;h4&gt;持续改善&lt;/h4&gt;
&lt;p&gt;还没有形成在纸上画状态的习惯。&lt;/p&gt;
&lt;p&gt;比较急于看刷题数量，很多题不管是自己写出还是看题解，并没有彻底弄懂。&lt;/p&gt;
&lt;p&gt;刷题模板套路总结的少，难度小的题目还是凭感觉，难度大的题目还是手足无措。&lt;/p&gt;
&lt;p&gt;细节不够满意，变量控制有时啰嗦，其实还是逻辑不够清晰。&lt;/p&gt;
&lt;h4&gt;总之&lt;/h4&gt;
&lt;p&gt;不贪多，每日一题，力求彻底弄懂。用画图单元测试等多种形式，把思路文字化，能让别人看懂自己的题解。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Tue, 13 Apr 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-04-13:/wan-cheng-leetcode300ti.html</guid><category>程序员生涯</category><category>职业</category><category>程序员</category><category>leetcode</category></item><item><title>ARTS第二十三周</title><link>/artsdi-er-shi-san-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 153 寻找旋转排序数组中的最小值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/coding-training/blob/main/leetcode/153.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二分查找&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_53/&lt;/p&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_54/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;链接器不是魔法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;链接器所做的就是将目标文件的代码和数据部分连接在一起，将符号的引用与它们的定义连接起来，从库中提取无法解析的符号，并写出一个可执行文件&lt;/li&gt;
&lt;li&gt;映射文件是可执行文件中所有符号及其地址的列表。这告诉从库中链接了哪些模块，以及每个模块的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;临时方案寿命&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建临时方案的原因多种多样，临时方案成功的关键很简单，它是有用的&lt;/li&gt;
&lt;li&gt;临时解决方案会产生惯性，它们存在，最终是有用的并且被广泛接受的，所以不需要立即解决临时方案的弊端。每当必须决定什么行动最能增加价值时，就会有许多比适当集成临时解决方案更高的行动。为什么?因为它就在那里，它有效，它被接受。唯一的缺点是它不遵循所选择的标准和指导方针-除了少数利基市场，这并不被认为是一个重要的力量&lt;/li&gt;
&lt;li&gt;如果临时解决方案出现问题，可能会创建新的临时方案解决这个临时方案的问题 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 12 Apr 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-04-12:/artsdi-er-shi-san-zhou.html</guid><category>ARTS</category><category>ASGI</category><category>daphne</category><category>django</category><category>nginx</category><category>数据采集</category></item><item><title>我跳了个寂寞</title><link>/wo-tiao-liao-ge-ji-mo.html</link><description>&lt;h3&gt;2021.03跳槽记&lt;/h3&gt;
&lt;h4&gt;首战触雷&lt;/h4&gt;
&lt;p&gt;30岁的年龄，这次特别想跳个大厂镀金。2月初联系上了杭州某大厂HR，大量招聘云计算相关研发岗。&lt;/p&gt;
&lt;p&gt;第一关，牛客线上算法考试。HR让准备好再考，时间上年前年后都可以。刚好今年提倡就地过年，春节在付费自习室练习算法题。春节假期最后一天进行了线上考试。三道题做出了两道，成功通过。&lt;/p&gt;
&lt;p&gt;性格测试和HR面，正常都能过吧，我也过了。跳槽是一个双向选择过程，性格测试和HR面注意不要故意’装好‘，反而会前后矛盾，网上也有小部分挂在这一关了。&lt;/p&gt;
&lt;p&gt;技术一面，本以为同在杭州，应该会到公司面试，结果是zoom视频面试。编程语言本身的问题回答的还可以，但是操作系统相关的感觉回答的很差，手撕算法编程也没有搞出来。面试官挺好，后面一直说很多人当面都写不出来，没关系。&lt;/p&gt;
&lt;p&gt;本以为技术一面挂掉了，后面又接到技术二面通知，定的时间不好，周六早上九点。技术细节答得还可以吧，设计能力我不知道怎么表达。出现了一个比较尴尬的情况，我其实是面试python岗位，但笔试的时候用了c++解题，后面面试官认为应聘c++岗位。面试官之前应该没看过简历，上来先让手撕算法编程题，没做出来。后面还有其他应聘者在后面排队 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Sat, 10 Apr 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-04-10:/wo-tiao-liao-ge-ji-mo.html</guid><category>程序员生涯</category><category>职业</category><category>程序员</category><category>面试</category></item><item><title>ARTS第二十二周</title><link>/artsdi-er-shi-er-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 面试题17.21 直方图的水量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/volume-of-histogram-lcci/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/coding-training/blob/main/leetcode/17.21.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;单调栈&lt;/li&gt;
&lt;li&gt;双指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_41/
https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_42/
https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_43/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;进程间通信影响应用程序响应时间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据结构和算法，在某些情况下可能会对性能产生影响，但在现代多层企业应用程序中不太可能主导性能&lt;/li&gt;
&lt;li&gt;远程进程间通信的数量通常对性能占主导地位，每个远程进程间通信都会对总体响应时间造成一些不可忽略的延迟，这些影响会累积起来，特别是当它们依次发生时&lt;/li&gt;
&lt;li&gt;应用节俭原则，优化流程之间的接口，以便以最小的交互量交换手边正确的数据&lt;/li&gt;
&lt;li&gt;在可能的情况下并行处理进程间通信，这样总体响应时间主要由延迟时间最长的IPC驱动&lt;/li&gt;
&lt;li&gt;缓存以前的ipc的结果，这样将来的ipc就可以通过使用本地缓存来避免&lt;/li&gt;
&lt;li&gt;无论是通过缓存 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 05 Apr 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-04-05:/artsdi-er-shi-er-zhou.html</guid><category>ARTS</category><category>fontTools</category><category>woff</category><category>字体加密</category><category>数据采集</category></item><item><title>ARTS第二十一周</title><link>/artsdi-er-shi-yi-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 74 搜索二维矩阵&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/search-a-2d-matrix/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/coding-training/blob/main/leetcode/74.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解题思路，数组元素具有单调性时，二分查找&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_37/
https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_38/
https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_39/
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;努力工作是没有回报的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应该考虑减少工作量以提高效率，完成更多的工作&lt;/li&gt;
&lt;li&gt;作为一名专业的程序员，你必须让自己在自己的专业领域保持更新&lt;/li&gt;
&lt;li&gt;准备和教育是职业的重要组成部分&lt;/li&gt;
&lt;li&gt;作为一名专业程序员，应该知道一周工作60个小时是不明智的。表现得像个专业人士:准备、影响、观察、反思和改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;如何使用Bug追踪器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一份好的bug报告需要以下三点&lt;/li&gt;
&lt;li&gt;如何尽可能精确地重现错误 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 29 Mar 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-03-29:/artsdi-er-shi-yi-zhou.html</guid><category>ARTS</category><category>bug报告</category><category>selenium</category><category>geetest</category><category>数据采集</category></item><item><title>ARTS第二十周</title><link>/artsdi-er-shi-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 剑指Offer38 字符串的排列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/coding-training/blob/main/leetcode/Offer38.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_22/&lt;/p&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_26/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;刻意练习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;刻意练习是为了提高完成任务的能力，关于完成任务的技巧和技术&lt;/li&gt;
&lt;li&gt;刻意练习意味着重复，为了提高对任务的一个或多个方面的掌握程度而执行任务&lt;/li&gt;
&lt;li&gt;刻意练习慢慢地，一遍又一遍，直到达到你想要的精通水平&lt;/li&gt;
&lt;li&gt;刻意练习为了掌握任务，而不是完成任务&lt;/li&gt;
&lt;li&gt;伟大很大程度上是一个有意识的选择问题&lt;/li&gt;
&lt;li&gt;获得专业知识的主要因素是花在有目的练习上的时间，天赋不是主要因素&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;不要忽略错误&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无论错误在代码中出现的可能性有多大，都应该检查它，并处理它；如果不这样做，不是在节省时间，是在为将来储存潜在的问题&lt;/li&gt;
&lt;li&gt;错误处理方式&lt;/li&gt;
&lt;li&gt;返回错误码太容易被忽略&lt;/li&gt;
&lt;li&gt;errno全局错误信号容易被忽略，很难使用&lt;/li&gt;
&lt;li&gt;异常是一种更受结构化语言支持的错误信令和处理方式&lt;/li&gt;
&lt;li&gt;不处理错误后果&lt;/li&gt;
&lt;li&gt;代码脆弱 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 22 Mar 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-03-22:/artsdi-er-shi-zhou.html</guid><category>ARTS</category><category>刻意练习</category><category>pyppeteer</category><category>geetest</category><category>数据采集</category></item><item><title>ARTS第十九周</title><link>/artsdi-shi-jiu-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 138 复制带随机指针的链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/coding-training/blob/main/leetcode/138.cpp"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_18/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;持续学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;随着编程越来越普遍，全球化越来越深入，开发者需要持续不断学习以保持竞争力&lt;/li&gt;
&lt;li&gt;有些it公司会慷慨提供培训，以扩宽员工技能；有些公司不会抽出时间或金钱进行培训；开发者要对自己的生涯负责&lt;/li&gt;
&lt;li&gt;持续学习的途径&lt;/li&gt;
&lt;li&gt;阅读博客，书籍&lt;/li&gt;
&lt;li&gt;要深入一种技术，要手动写些代码&lt;/li&gt;
&lt;li&gt;要和顶尖导师工作，如果找不到，考虑换个工作&lt;/li&gt;
&lt;li&gt;阅读顶尖博主的博客和书籍&lt;/li&gt;
&lt;li&gt;了解使用的框架和库的原理源码，试着调试源码&lt;/li&gt;
&lt;li&gt;遇到问题，理清问题本质，查看Google上其他人的回答&lt;/li&gt;
&lt;li&gt;学习的更好方法，复述或教授别人；当别人向你提问，你更有动力；尝试加入讨论&lt;/li&gt;
&lt;li&gt;加入或创建你感兴趣的技术学习小组&lt;/li&gt;
&lt;li&gt;参加大会，或者查看大会演讲&lt;/li&gt;
&lt;li&gt;在代码上运行静态分析工具或者查看ide警告，理解它们&lt;/li&gt;
&lt;li&gt;遵循实用程序员的建议，每年学习一种新技术或工具，尝试当前的技术栈中使用 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Wed, 17 Mar 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-03-17:/artsdi-shi-jiu-zhou.html</guid><category>ARTS</category><category>持续学习</category><category>webassembly</category></item><item><title>ARTS第十八周</title><link>/artsdi-shi-ba-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 430 扁平化多级双向链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c%2B%2B/430.cpp"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_15/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;理性编码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;推理软件正确性得基本方法是将所有代码分成小段(通常组织为精简函数)，并讨论小段代码的正确行&lt;/li&gt;
&lt;li&gt;小块代码应该便于对其状态的解读，包括函数名，函数变量名，任务描述，解读简单，容易抽象成前提条件和后置条件&lt;/li&gt;
&lt;li&gt;许多众所周知的编码实践使推理更容易，大多可以被静态代码分析器检查&lt;/li&gt;
&lt;li&gt;不要使用goto，会导致代码高度耦合&lt;/li&gt;
&lt;li&gt;不要使用可修改的全局变量，会导致代码相互依赖改变量状态(数值)&lt;/li&gt;
&lt;li&gt;变量尽量拥有最小的作用域&lt;/li&gt;
&lt;li&gt;让对象不可变&lt;/li&gt;
&lt;li&gt;通过使用水平和垂直的间距，例如对齐相关的结构，提高代码可读性&lt;/li&gt;
&lt;li&gt;通过为对象、类型、函数等选择描述性(但相对较短)的名称，使代码自文档化&lt;/li&gt;
&lt;li&gt;如果你需要一个嵌套的小块，让它成为一个函数&lt;/li&gt;
&lt;li&gt;函数尽量短而精，即简短并且专注于一个单一的任务，以前有24行的限制，现在也适用&lt;/li&gt;
&lt;li&gt;函数参数尽量少 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 25 Jan 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2021-01-25:/artsdi-shi-ba-zhou.html</guid><category>ARTS</category><category>理性编码</category><category>注释</category><category>安全的API</category></item><item><title>ARTS第十七周</title><link>/artsdi-shi-qi-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 338 比特位计数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/counting-bits/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/338.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://docs.oracle.com/cd/E19435-01/819-0069/intro.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;消息队列架构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;消息队列是一种可靠的异步消息传递服务&lt;/li&gt;
&lt;li&gt;消息服务器由一个或多个代理组成，并执行消息路由和传递，它是消息队列服务的核心&lt;/li&gt;
&lt;li&gt;消息服务器由一个或一组共同工作的代理(作为代理集群)组成，以执行消息路由和传递服务&lt;/li&gt;
&lt;li&gt;身份验证，操作授权&lt;/li&gt;
&lt;li&gt;设置和客户端通信协议&lt;/li&gt;
&lt;li&gt;接受客户端消息，并将其放置在各自的物理目的地&lt;/li&gt;
&lt;li&gt;将消息路由并交付给一个或多个消费客户端&lt;/li&gt;
&lt;li&gt;保证可靠的交付&lt;/li&gt;
&lt;li&gt;为监控系统性能提供数据&lt;/li&gt;
&lt;li&gt;客户端运行时代理&lt;/li&gt;
&lt;li&gt;管理到消息服务器的消息传递&lt;/li&gt;
&lt;li&gt;建立连接，建立客户的身份&lt;/li&gt;
&lt;li&gt;实现客户端确认&lt;/li&gt;
&lt;li&gt;控制跨连接的消息流&lt;/li&gt;
&lt;li&gt;可以覆盖由生成客户端设置的消息头值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;消息传递步骤&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;持久、可靠地传递的消息步骤&lt;/li&gt;
&lt;li&gt;消息生产&lt;ul&gt;
&lt;li&gt;客户端运行时通过连接将消息从消息生成器传递到消息服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息处理和路由&lt;ul&gt;
&lt;li&gt;消息服务器从连接中读取消息并将其放置到适当的目的地&lt;/li&gt;
&lt;li&gt;消息服务器将(持久的)消息放在数据存储中 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 17 Aug 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-08-17:/artsdi-shi-qi-zhou.html</guid><category>ARTS</category><category>消息队列</category><category>distutils</category><category>setuptools</category><category>tox</category></item><item><title>ARTS第十六周</title><link>/artsdi-shi-liu-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 338 比特位计数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/counting-bits/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/338.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_14/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;代码评审&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;提高了代码质量并降低了缺陷率&lt;/li&gt;
&lt;li&gt;代码可能有很多细节涉及系统具体业务&lt;/li&gt;
&lt;li&gt;代码审查的目的不应该是简单地纠正代码中的错误，而应该是分享知识和建立共同的编码指南&lt;/li&gt;
&lt;li&gt;通过学习和理解代码来检查代码，而不是寻找错误&lt;/li&gt;
&lt;li&gt;代码审查期间要温和，确保你的评论是有建设性的，而不是刻薄的&lt;/li&gt;
&lt;li&gt;避免团队成员中的组织级别影响代码评审&lt;/li&gt;
&lt;li&gt;如果团队有通过工具检查的编码约定，那么代码审查将更容易进行。这样，代码格式化就不会在代码评审会议上讨论&lt;/li&gt;
&lt;li&gt;让代码审查变得有趣也许是成功的最重要因素&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tip&lt;/h2&gt;
&lt;h2&gt;Share&lt;/h2&gt;
&lt;h3&gt;Electron(六)&lt;/h3&gt;
&lt;h4&gt;多个渲染进程间通信&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//cefmanage.js&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node-uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ipcMain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cefmanage …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 10 Aug 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-08-10:/artsdi-shi-liu-zhou.html</guid><category>ARTS</category><category>代码评审</category><category>electron</category></item><item><title>ARTS第十五周</title><link>/artsdi-shi-wu-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 190 颠倒二进制位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/reverse-bits/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/190.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_13/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;代码布局&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;编程时花在浏览和阅读代码上的时间要比实际输入多得多&lt;/li&gt;
&lt;li&gt;如果行为相同的代码看起来也一样，那么感知系统将帮助找出其中的区别；要遵守关于如何在编译单元中布置类的各个部分的约定:常量、字段、公共方法和私有方法&lt;/li&gt;
&lt;li&gt;让团队就基础的自动格式化程序达成一致&lt;/li&gt;
&lt;li&gt;除非有积极的分歧，一个团队将很快汇聚到一个共同的“手工完成”的风格&lt;/li&gt;
&lt;li&gt;格式化程序无法理解意图，重要的是换行和分组反映了代码的意图，而不仅仅是语言的语法&lt;/li&gt;
&lt;li&gt;紧凑的格式，在屏幕上看到的内容越多，在不破坏上下文滚动或切换文件的情况下，能看到的内容就越多；布局能帮助理解代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tip&lt;/h2&gt;
&lt;h2&gt;Share&lt;/h2&gt;
&lt;h3&gt;Electron(五)&lt;/h3&gt;
&lt;h4&gt;批量管理进程间通信&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.js&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ipcMain&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mssql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 03 Aug 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-08-03:/artsdi-shi-wu-zhou.html</guid><category>ARTS</category><category>代码布局</category><category>electron</category></item><item><title>ARTS第十四周</title><link>/artsdi-shi-si-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 191 位1的个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/number-of-1-bits/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/191.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_12/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;代码设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;随着模型的过时，未完成的设计通过重复地构建和改进接近最终目标而发展。&lt;/li&gt;
&lt;li&gt;一个偶然的观察者可能很难区分一个未完成的设计和一个完成的产品。&lt;/li&gt;
&lt;li&gt;建造成本比设计成本更容易计算，当可预测的任务缩减为零时，不可预测的设计时间开始占主导地位。结果产生得更快，但可靠的时间线却会溜走。&lt;/li&gt;
&lt;li&gt;随着建筑成本的减少，能够快速完成设计的公司在市场上获得优势。快速完成设计成为工程公司的核心推动力。&lt;/li&gt;
&lt;li&gt;伟大的设计师致力于掌握他们的工艺而产生的。代码也不例外。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tip&lt;/h2&gt;
&lt;h2&gt;Share&lt;/h2&gt;
&lt;h3&gt;Electron(四)&lt;/h3&gt;
&lt;h4&gt;跨域发送请求&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// main&lt;/span&gt;
&lt;span class="c1"&gt;// node-adodb模块&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 27 Jul 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-07-27:/artsdi-shi-si-zhou.html</guid><category>ARTS</category><category>electron</category></item><item><title>ARTS第十三周</title><link>/artsdi-shi-san-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 77 组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/combinations/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/77.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://docs.microsoft.com/zh-cn/windows/win32/com/component-object-model--com--portal&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Component Object Model&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用于组件之间函数调用的二进制标准&lt;/li&gt;
&lt;li&gt;微软OLE(复合文档)和ActiveX(支持internet的组件)技术的基础技术&lt;/li&gt;
&lt;li&gt;COM指定了一个对象模型和编程要求，使COM对象(也称为COM组件)能够与其他对象交互&lt;/li&gt;
&lt;li&gt;提供符合COM规范的运行时环境的主机系统&lt;/li&gt;
&lt;li&gt;定义特性契约的接口，以及实现接口的组件&lt;/li&gt;
&lt;li&gt;向系统提供组件的服务器和使用组件提供的特性的客户机&lt;/li&gt;
&lt;li&gt;跟踪组件在本地和远程主机上部署的位置的注册表&lt;/li&gt;
&lt;li&gt;一种服务控制管理器，用于定位本地和远程主机上的组件，并将服务器连接到客户机&lt;/li&gt;
&lt;li&gt;一种结构化的存储协议，定义了如何在主机文件系统上导航文件的内容&lt;/li&gt;
&lt;li&gt;COM定义了一些基本接口，这些接口提供所有基于COM的技术通用的功能&lt;/li&gt;
&lt;li&gt;将函数的强类型分组为接口的规定&lt;/li&gt;
&lt;li&gt;提供多态性、特性发现和对象生命周期跟踪的基本接口&lt;/li&gt;
&lt;li&gt;一种唯一标识组件及其接口的机制&lt;ul&gt;
&lt;li&gt;每个接口都有自己唯一的接口标识符，是一个全局唯一标识符(GUID)&lt;/li&gt;
&lt;li&gt;在创建新接口时，必须为该接口创建新的标识符 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 20 Jul 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-07-20:/artsdi-shi-san-zhou.html</guid><category>ARTS</category><category>COM</category><category>electron</category></item><item><title>ARTS第十二周</title><link>/artsdi-shi-er-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 98 验证二叉搜索树&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/validate-binary-search-tree/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/98.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/agis/git-style-guide&lt;/p&gt;
&lt;p&gt;https://github.com/aseaday/git-style-guide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git规范&lt;/p&gt;
&lt;h4&gt;分支&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;选择简短和具有描述性的名字来命名分支&lt;/li&gt;
&lt;li&gt;来自外部的标识符也适合用作分支的名字，例如来自 Github 的 Issue 序号&lt;/li&gt;
&lt;li&gt;用破折号分割单词&lt;/li&gt;
&lt;li&gt;当不同的人围绕同一个特性开发时，维护整个团队的特性分支与每个人的独立分支是比较方便的做法，branch/dever&lt;/li&gt;
&lt;li&gt;合并之后，除非有特殊原因，从上游仓库中删除你的分支&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;提交&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;每个提交应当只包含一个简单的逻辑改动，不要在一个提交里包含多个逻辑改动。比如，如果一个补丁修复了一个 Bug，又优化了一个特性的性能，就将其拆分&lt;/li&gt;
&lt;li&gt;不要将一个逻辑改动拆分提交。例如一个功能的实现及其对应的测试应当一并提交&lt;/li&gt;
&lt;li&gt;尽早、尽快提交。出问题时，短小、完整的提交更容易发现并修正&lt;/li&gt;
&lt;li&gt;提交应当依逻辑排序 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 13 Jul 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-07-13:/artsdi-shi-er-zhou.html</guid><category>ARTS</category><category>git规范</category><category>electron</category></item><item><title>ARTS第十一周</title><link>/artsdi-shi-yi-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 433 最小基因变化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/minimum-genetic-mutation/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/433.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://jsonapi.org/format/&lt;/p&gt;
&lt;p&gt;http://jsonapi.org.cn/format/&lt;/p&gt;
&lt;p&gt;https://github.com/kalasjocke/hyp&lt;/p&gt;
&lt;p&gt;https://www.kutu66.com/GitHub/article_108976&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;json api风格&lt;/p&gt;
&lt;h3&gt;介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据交互规范，定义客户端如何获取修改资源，以及服务端如何响应&lt;/li&gt;
&lt;li&gt;定义业界规范，有利于框架实现&lt;/li&gt;
&lt;li&gt;常用的api风格，RPC，REST，GraphQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;约定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;双方必须包含Content-Type: application/vnd.api+json请求头&lt;/li&gt;
&lt;li&gt;不能包含媒体类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;top level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;json api …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 06 Jul 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-07-06:/artsdi-shi-yi-zhou.html</guid><category>ARTS</category><category>json api</category><category>electron</category></item><item><title>ARTS第十周</title><link>/artsdi-shi-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 529 扫雷游戏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/minesweeper/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/529.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://medium.com/@amymaraisane/6-tips-to-success-as-a-self-taught-software-developer-ba5eebfb7a98&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;自学编程的6个技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;写下你的问题&lt;/li&gt;
&lt;li&gt;搜索答案更容易，迫使你有意识地清晰地表达你的问题&lt;/li&gt;
&lt;li&gt;避免陷入浩瀚的文档中，意识主要方向&lt;/li&gt;
&lt;li&gt;有时会发现更好的答案，见证自己的成长&lt;/li&gt;
&lt;li&gt;记录花在编码上的时间&lt;/li&gt;
&lt;li&gt;展示自己学习成果&lt;/li&gt;
&lt;li&gt;向别人展示你的成果，推销自己&lt;/li&gt;
&lt;li&gt;为代码编写单元测试&lt;/li&gt;
&lt;li&gt;为解决现实需求编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tip&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hash存储value-index，改变list的indexof循环判断value查找index&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 客户是分级的，一级二级客户的code是不同的，现实中可能是层层代理商，找出代理商的级次&lt;/span&gt;
&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;001&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00101&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;002&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00201&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00202&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0020201&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 可能存在数据库中，或其他配置文件中，-分割每级长度&lt;/span&gt;
&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3-2-2&amp;#39;&lt;/span&gt;


&lt;span class="c1"&gt;# 用数组索引当作级次，存放对应长度&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solution1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-06-29:/artsdi-shi-zhou.html</guid><category>ARTS</category><category>单元测试</category><category>pyunit</category></item><item><title>ARTS第九周</title><link>/artsdi-jiu-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 231 2的幂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/power-of-two/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/231.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://medium.com/cracking-the-data-science-interview/how-operating-systems-work-10-concepts-you-should-know-as-a-developer-8d63bb38331f&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于操作系统，开发人员应该知道的10个概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统有三个关键元素&lt;/li&gt;
&lt;li&gt;抽象(进程、线程、文件、套接字、内存)&lt;/li&gt;
&lt;li&gt;机制(创建、调度、打开、写、分配)&lt;/li&gt;
&lt;li&gt;策略(LRU、EDF)&lt;/li&gt;
&lt;li&gt;操作系统设计有两个原则&lt;/li&gt;
&lt;li&gt;通过实现灵活的机制来支持策略，实现机制和策略的分离&lt;/li&gt;
&lt;li&gt;针对常见情况的优化:将OS用在哪里?用户希望在该机器上执行什么?工作负载要求是什么?&lt;/li&gt;
&lt;li&gt;进程管理&lt;/li&gt;
&lt;li&gt;一个程序被加载到内存中并成为一个进程时，它可以被分为四个部分:堆栈、堆、文本和数据&lt;ul&gt;
&lt;li&gt;栈:进程栈包含临时数据，如方法/函数参数、返回地址和局部变量。&lt;/li&gt;
&lt;li&gt;堆:在进程运行时动态分配内存 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 15 Jun 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-06-15:/artsdi-jiu-zhou.html</guid><category>ARTS</category><category>操作系统</category><category>位运算</category><category>原码</category><category>反码</category><category>补码</category></item><item><title>ARTS第八周</title><link>/artsdi-ba-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 589 N叉树的前序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/589.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leetcode 590 N叉树的后序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/590.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leetcode 429 N叉树的层序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/429.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leetcode 144 二叉树的前序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/144.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leetcode 94 二叉树的中序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/94.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leetcode 102 二叉树的层序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/102.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;http://blog.cleancoder.com/uncle-bob/2011/09/30/Screaming-Architecture.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;就像住宅或图书馆的计划需要描述这些建筑的用例一样，软件应用程序的架构也需要描述应用程序的用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;架构不应该与框架有关，架构不应该由框架提供；框架是要使用的工具，而不是要遵守的架构；如果你的架构基于框架，那么它就不能基于你的用例 …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 08 Jun 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-06-08:/artsdi-ba-zhou.html</guid><category>ARTS</category><category>numpy</category><category>torch</category></item><item><title>ARTS第七周</title><link>/artsdi-qi-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 589 N叉树的前序遍历&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/python/589.py"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;leetcode 167 有序数组二数之和 左右指针解法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/167.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;http://blog.cleancoder.com/uncle-bob/2011/01/19/individuals-and-interactions.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开发太关注编程本身，是否会忽略用户？&lt;/p&gt;
&lt;p&gt;我们不仅重视客户的协作，而且重视富有成效的伙伴关系。&lt;/p&gt;
&lt;p&gt;我们希望能够以专业和技能完成我们的工作，并与我们的客户合作，以实现最好的可能的结果。&lt;/p&gt;
&lt;p&gt;我们沉浸在“客户沟通的关键作用”中，以至于我们将这种作用放大为合作关系。&lt;/p&gt;
&lt;p&gt;软件工艺运动并没有夸大技术的作用;相反，它试图重新获得敏捷运动失去的平衡。&lt;/p&gt;
&lt;p&gt;当你看到一些程序员谈论代码撤退、公审、katas、TDD或其他一些深入的技术话题时，恭喜他们在实践中付出了应有的努力。&lt;/p&gt;
&lt;p&gt;当您看到敏捷教练谈论看板、精益、迭代长度或故事点时，请祝贺他们对规程的奉献。&lt;/p&gt;
&lt;h2&gt;Tip&lt;/h2&gt;
&lt;p&gt;树遍历代码模板&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 01 Jun 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-06-01:/artsdi-qi-zhou.html</guid><category>ARTS</category><category>pull request</category></item><item><title>ARTS第六周</title><link>/artsdi-liu-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 242 有效的字母异位词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/valid-anagram/description/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/242.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;http://blog.cleancoder.com/uncle-bob/2011/01/17/software-craftsmanship-is-about.html&lt;/p&gt;
&lt;h4&gt;我们没有做的&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;我们没有把代码放在一切的中心&lt;/li&gt;
&lt;li&gt;我们不会只关注内部，而忽视业务和客户&lt;/li&gt;
&lt;li&gt;我们不提供廉价的认证&lt;/li&gt;
&lt;li&gt;我们没有忘记我们的工作是取悦客户&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;我们再也不做的事情&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;我们不会为了赶进度而把事情搞得一团糟&lt;/li&gt;
&lt;li&gt;我们不会接受关于以后清理东西的愚蠢的老谎言&lt;/li&gt;
&lt;li&gt;我们不会相信快速意味着肮脏的说法&lt;/li&gt;
&lt;li&gt;我们不会接受做错事的选择&lt;/li&gt;
&lt;li&gt;我们不会允许任何人强迫我们做出不专业的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;从现在起我们要做&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;我们将满足我们的时间表，因为我们知道，快速前进的唯一途径就是顺利前进&lt;/li&gt;
&lt;li&gt;我们将通过编写最好的代码来取悦我们的客户&lt;/li&gt;
&lt;li&gt;我们将尽我们所能创造出最好的设计来尊重我们的雇主&lt;/li&gt;
&lt;li&gt;我们将通过测试所有可以测试的东西来尊重我们的团队&lt;/li&gt;
&lt;li&gt;我们将足够谦虚地首先编写这些测试&lt;/li&gt;
&lt;li&gt;我们将通过练习来提高我们的技艺&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;我们将记住前辈的话&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;任何值得做的事就值得把它做好&lt;/li&gt;
&lt;li&gt;踏实和稳重是赢得比赛的关键&lt;/li&gt;
&lt;li&gt;测量两次削减一次&lt;/li&gt;
&lt;li&gt;练习,练习,再练习；实践，实践，实践&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;有人会认为专注代码专注质量可能会抛弃客户放弃现实 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-05-25:/artsdi-liu-zhou.html</guid><category>ARTS</category><category>左值</category><category>右值</category><category>move</category></item><item><title>ARTS第五周</title><link>/artsdi-wu-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 84 柱状图中最大的矩形&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/"&gt;原题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/84.best.c"&gt;解题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_03/
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用户不像程序员那样思考，他们使用电脑的时间要少得多，他们既不知道也不在乎计算机是如何工作的。他们不能使用程序员所熟悉的解决问题的技术，它们不能识别程序员使用的模式和线索&lt;/li&gt;
&lt;li&gt;观察用户怎么工作，怎么使用软件，提问工作流程相关问题，避免过于具体的任务，偏于软件逻辑的问题；不要打断和帮助别人，问自己 “他为什么要那样做”，“她为什么不那样做”&lt;/li&gt;
&lt;li&gt;用户的核心工作是类似的，试图以同样的顺序完成任务，在同样的地方犯同样的错误；围绕核心进行设计，“如果用户想要……怎么办”，导致了复杂的特性和用户需求的混乱&lt;/li&gt;
&lt;li&gt;用户陷入困境时，他们会缩小关注范围，帮助文本对于糟糕的用户界面设计来说是一个糟糕的解决方案；有说明或帮助文本，请确保将其放在问题区域旁边，有时工具提示比帮助菜单更有用&lt;/li&gt;
&lt;li&gt;Users tend to muddle through. They'll find a …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 18 May 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-05-18:/artsdi-wu-zhou.html</guid><category>ARTS</category></item><item><title>ARTS第四周</title><link>/artsdi-si-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 155 最小栈
- &lt;a href="https://leetcode-cn.com/problems/min-stack/"&gt;原题&lt;/a&gt;
- &lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/155.best.c"&gt;解题&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://herbsutter.com/2020/04/01/when-the-hot-loops-done/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;编写高吞吐量热循环代码一些小技巧（A "hot loops" is code that get called often）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;避免持有锁或其他资源，除非你知道它不会阻塞另一个性能敏感的线程。绝对不要获取任何新锁或其他资源!(当然，.Close()可能会声称是非阻塞的，但真的能确定吗?)&lt;/li&gt;
&lt;li&gt;将所有阻塞操作放在性能关键的部分之外，包括监控系统调度&lt;/li&gt;
&lt;li&gt;不要进行I/O操作，包括控制台日志记录&lt;/li&gt;
&lt;li&gt;将I/O操作化作无锁环缓冲区操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tip&lt;/h2&gt;
&lt;h4&gt;时间格式处理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;用户本地时间格式的差异，经常导致容易忽略的bug。例如windows下开发一个每天弹窗提示用户一次的功能，第一天本地时间格式是2020-01-01 00:00:00，第二天本地时间格式是2020/01/02 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 11 May 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-05-11:/artsdi-si-zhou.html</guid><category>ARTS</category><category>vscode快捷键</category></item><item><title>ARTS第三周</title><link>/artsdi-san-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 20 有效的括号
- &lt;a href="https://leetcode-cn.com/problems/valid-parentheses/"&gt;原题&lt;/a&gt;
- &lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/20.c"&gt;解题&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://pyinstaller.readthedocs.io/en/stable/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pyinstaller打包py脚本为系统可执行程序格式。&lt;/p&gt;
&lt;p&gt;windows下支持打包为exe可执行文件。&lt;/p&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;p&gt;pip install pyinstaller&lt;/p&gt;
&lt;h3&gt;工作流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;对脚本进行解析&lt;/li&gt;
&lt;li&gt;在脚本目录生成 xxx.spec 文件&lt;/li&gt;
&lt;li&gt;创建一个 build 目录，写入一些日志文件和中间流程文件到 build 目录&lt;/li&gt;
&lt;li&gt;创建 dist 目录，生成可执行文件到 dist 目录&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;使用&lt;/h3&gt;
&lt;p&gt;pyinstaller -F xxx.py&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-F 打包成单独的 .exe 文件，这时生成的 .exe 文件会比较大，而且运行速度较慢 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 04 May 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-05-04:/artsdi-san-zhou.html</guid><category>ARTS</category><category>python</category><category>pyinstaller</category><category>electron</category></item><item><title>ARTS第二周</title><link>/artsdi-er-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 25  K个一组翻转链表
- &lt;a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/"&gt;原题&lt;/a&gt;
- &lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/25.c"&gt;解题&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://developer.gnome.org/glib/stable/&lt;/p&gt;
&lt;p&gt;https://developer.ibm.com/tutorials/l-glib/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;glib是比较好的第三方C库，是gnome的基础库，提供了常用的数据结构和算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory chunks&lt;/li&gt;
&lt;li&gt;Doubly-linked lists&lt;/li&gt;
&lt;li&gt;Singly-linked lists&lt;/li&gt;
&lt;li&gt;Hash tables&lt;/li&gt;
&lt;li&gt;Strings (which can grow dynamically)&lt;/li&gt;
&lt;li&gt;String chunks (groups of strings)&lt;/li&gt;
&lt;li&gt;Arrays (which can grow in size as elements are added …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Mon, 27 Apr 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-04-27:/artsdi-er-zhou.html</guid><category>ARTS</category><category>glib</category><category>CORS</category></item><item><title>ARTS第一周</title><link>/artsdi-yi-zhou.html</link><description>&lt;h2&gt;Algorithm&lt;/h2&gt;
&lt;p&gt;leetcode 206 反转链表
- &lt;a href="https://leetcode-cn.com/problems/reverse-linked-list/"&gt;原题&lt;/a&gt;
- &lt;a href="https://github.com/qianlizhixing12/leetcode/blob/master/c/206.c"&gt;解题&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;https://medium.com/@maladdinsayed/advanced-techniques-and-ideas-for-better-coding-skills-d632e9f9675&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;好的编程技巧和思想&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不要重构没有单元测试的项目，除非你先补充单元测试。&lt;/li&gt;
&lt;li&gt;从最深层开始重构，通常意味着功能单一，影响范围小，重构相对容易。&lt;/li&gt;
&lt;li&gt;尽量使函数功能尽量单一，抽象为功能更小的子函数。&lt;/li&gt;
&lt;li&gt;即使if只有一行，也尽量使用{}。&lt;/li&gt;
&lt;li&gt;尽量不要使用"幻数"(直接使用常数)。&lt;/li&gt;
&lt;li&gt;规范函数，变量，测试命名，使之有助理解逻辑。&lt;/li&gt;
&lt;li&gt;用严格等号代替非严格等号。&lt;/li&gt;
&lt;li&gt;给公共方法一个简短的名字。&lt;/li&gt;
&lt;li&gt;移除没有被调用的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些应该都是耳熟能详的编程规范，软件是整体和局部的结合，都决定软件的质量。&lt;/p&gt;
&lt;p&gt;程序员进阶法宝：模仿好的代码，养成好的习惯，想法经历大的项目。&lt;/p&gt;
&lt;h2&gt;Tip&lt;/h2&gt;
&lt;p&gt;链表相关问题，可以适当借助“哨兵”，统一临界情况的处理。&lt;/p&gt;
&lt;h2&gt;Share&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;引用：&lt;/p&gt;
&lt;p&gt;https://www.geeksforgeeks …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">qianlizhixing</dc:creator><pubDate>Tue, 21 Apr 2020 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2020-04-21:/artsdi-yi-zhou.html</guid><category>ARTS</category><category>sizeof</category></item></channel></rss>